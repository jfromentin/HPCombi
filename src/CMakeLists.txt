#****************************************************************************#
#       Copyright (C) 2016 Florent Hivert <Florent.Hivert@lri.fr>,           #
#                                                                            #
#  Distributed under the terms of the GNU General Public License (GPL)       #
#                                                                            #
#    This code is distributed in the hope that it will be useful,            #
#    but WITHOUT ANY WARRANTY; without even the implied warranty of          #
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU       #
#   General Public License for more details.                                 #
#                                                                            #
#  The full text of the GPL is available at:                                 #
#                                                                            #
#                  http://www.gnu.org/licenses/                               #
#****************************************************************************#

include(CheckCXXSymbolExists)
add_subdirectory(gpu)

include(CheckIncludeFileCXX)
include(CheckCXXSourceCompiles)

check_include_file_cxx("experimental/numeric" HPCOMBI_HAVE_EXPERIMENTAL_NUMERIC)
if (HPCOMBI_HAVE_EXPERIMENTAL_NUMERIC)
  check_cxx_source_compiles(
        "
        #include <experimental/numeric>
        static_assert( std::experimental::lcm(4, 6) == 12, \"Buggy lcm\");
        int main() { }
        "
        HPCOMBI_HAVE_EXPERIMENTAL_NUMERIC_LCM)
endif (HPCOMBI_HAVE_EXPERIMENTAL_NUMERIC)

check_cxx_source_compiles(
  "
  using T = int;
  constexpr int exec(T f()) { return f(); }
  constexpr int foo() { return 1; }
  static_assert(exec(foo) == 1, \"Failed exec\");
  int main() {}
  "
  HPCOMBI_CONSTEXPR_FUN_ARGS)

check_include_file_cxx("x86intrin.h" HPCOMBI_HAVE_X86INTRIN)
if (NOT ${HPCOMBI_HAVE_X86INTRIN})
  message(FATAL_ERROR "No SSE or AVX compiler intrinsics")
endif()
file(READ ${CMAKE_SOURCE_DIR}/list_intrin.txt hpcombi_intrinsics)
string(REPLACE ";" "|" hpcombi_intrinsics "${hpcombi_intrinsics}")
string(REPLACE "\n" ";" hpcombi_intrinsics "${hpcombi_intrinsics}")
foreach (intrin ${hpcombi_intrinsics})
  string(REPLACE "|" ";" intrin "${intrin}")
  list(GET intrin 0 intrin_name)
  check_cxx_symbol_exists("${intrin_name}" "x86intrin.h"
    "HPCOMBI_HAVE_${intrin_name}")
endforeach()

set(AUTOGENERATED_WARNING "WARNING: THIS IS A CMAKE AUTO-GENERATED FILE.")

include_directories(${CMAKE_SOURCE_DIR}/include ${PROJECT_BINARY_DIR})
add_library(testtools SHARED testtools.cpp)
add_library(iotools SHARED iotools.cpp)

# set_target_properties(testtools PROPERTIES PUBLIC_HEADER
#   "../include/hpcombi.hpp;../include/perm16.hpp;../include/perm16_impl.hpp;../include/perm_generic.hpp;../include/power.hpp;../include/testtools.hpp")
# set_target_properties(testtools PROPERTIES PRIVATE_HEADER
#   "../include/fallback/gcdlcm.hpp;../include/fallback/seq.hpp"
#   )

# install (TARGETS testtools
#   LIBRARY DESTINATION lib
#   PUBLIC_HEADER DESTINATION "include/${CMAKE_PROJECT_NAME}"
#   PRIVATE_HEADER DESTINATION "include/${CMAKE_PROJECT_NAME}/fallback"
#   )

install (
    DIRECTORY ${CMAKE_SOURCE_DIR}/include/
    DESTINATION include
    FILES_MATCHING PATTERN "*.h*")

if ( CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_CXX_COMPILER_ID STREQUAL "Clang" )
  target_compile_options(testtools PUBLIC -mavx -mtune=native -funroll-loops -flax-vector-conversions)
endif ()
